// Code generated by mockery v2.42.1. DO NOT EDIT.

package replicator

import (
	internal "github.com/cloudogu/sonarcarp/internal"
	mock "github.com/stretchr/testify/mock"
)

// mockUserModifier is an autogenerated mock type for the userModifier type
type mockUserModifier struct {
	mock.Mock
}

type mockUserModifier_Expecter struct {
	mock *mock.Mock
}

func (_m *mockUserModifier) EXPECT() *mockUserModifier_Expecter {
	return &mockUserModifier_Expecter{mock: &_m.Mock}
}

// createOrGetUser provides a mock function with given fields: user
func (_m *mockUserModifier) createOrGetUser(user internal.User) (userId, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for createOrGetUser")
	}

	var r0 userId
	var r1 error
	if rf, ok := ret.Get(0).(func(internal.User) (userId, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(internal.User) userId); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Get(0).(userId)
	}

	if rf, ok := ret.Get(1).(func(internal.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockUserModifier_createOrGetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'createOrGetUser'
type mockUserModifier_createOrGetUser_Call struct {
	*mock.Call
}

// createOrGetUser is a helper method to define mock.On call
//   - user internal.User
func (_e *mockUserModifier_Expecter) createOrGetUser(user interface{}) *mockUserModifier_createOrGetUser_Call {
	return &mockUserModifier_createOrGetUser_Call{Call: _e.mock.On("createOrGetUser", user)}
}

func (_c *mockUserModifier_createOrGetUser_Call) Run(run func(user internal.User)) *mockUserModifier_createOrGetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(internal.User))
	})
	return _c
}

func (_c *mockUserModifier_createOrGetUser_Call) Return(_a0 userId, _a1 error) *mockUserModifier_createOrGetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockUserModifier_createOrGetUser_Call) RunAndReturn(run func(internal.User) (userId, error)) *mockUserModifier_createOrGetUser_Call {
	_c.Call.Return(run)
	return _c
}

// newMockUserModifier creates a new instance of mockUserModifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockUserModifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockUserModifier {
	mock := &mockUserModifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
