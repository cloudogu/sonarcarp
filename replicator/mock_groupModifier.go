// Code generated by mockery v2.42.1. DO NOT EDIT.

package replicator

import mock "github.com/stretchr/testify/mock"

// mockGroupModifier is an autogenerated mock type for the groupModifier type
type mockGroupModifier struct {
	mock.Mock
}

type mockGroupModifier_Expecter struct {
	mock *mock.Mock
}

func (_m *mockGroupModifier) EXPECT() *mockGroupModifier_Expecter {
	return &mockGroupModifier_Expecter{mock: &_m.Mock}
}

// addMissingGroups provides a mock function with given fields: userId0, casGroups
func (_m *mockGroupModifier) addMissingGroups(userId0 userId, casGroups []string) error {
	ret := _m.Called(userId0, casGroups)

	if len(ret) == 0 {
		panic("no return value specified for addMissingGroups")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(userId, []string) error); ok {
		r0 = rf(userId0, casGroups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockGroupModifier_addMissingGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'addMissingGroups'
type mockGroupModifier_addMissingGroups_Call struct {
	*mock.Call
}

// addMissingGroups is a helper method to define mock.On call
//   - userId0 userId
//   - casGroups []string
func (_e *mockGroupModifier_Expecter) addMissingGroups(userId0 interface{}, casGroups interface{}) *mockGroupModifier_addMissingGroups_Call {
	return &mockGroupModifier_addMissingGroups_Call{Call: _e.mock.On("addMissingGroups", userId0, casGroups)}
}

func (_c *mockGroupModifier_addMissingGroups_Call) Run(run func(userId0 userId, casGroups []string)) *mockGroupModifier_addMissingGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(userId), args[1].([]string))
	})
	return _c
}

func (_c *mockGroupModifier_addMissingGroups_Call) Return(_a0 error) *mockGroupModifier_addMissingGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGroupModifier_addMissingGroups_Call) RunAndReturn(run func(userId, []string) error) *mockGroupModifier_addMissingGroups_Call {
	_c.Call.Return(run)
	return _c
}

// removeNonExistingGroups provides a mock function with given fields: userId0, casGroups
func (_m *mockGroupModifier) removeNonExistingGroups(userId0 userId, casGroups []string) error {
	ret := _m.Called(userId0, casGroups)

	if len(ret) == 0 {
		panic("no return value specified for removeNonExistingGroups")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(userId, []string) error); ok {
		r0 = rf(userId0, casGroups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// mockGroupModifier_removeNonExistingGroups_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'removeNonExistingGroups'
type mockGroupModifier_removeNonExistingGroups_Call struct {
	*mock.Call
}

// removeNonExistingGroups is a helper method to define mock.On call
//   - userId0 userId
//   - casGroups []string
func (_e *mockGroupModifier_Expecter) removeNonExistingGroups(userId0 interface{}, casGroups interface{}) *mockGroupModifier_removeNonExistingGroups_Call {
	return &mockGroupModifier_removeNonExistingGroups_Call{Call: _e.mock.On("removeNonExistingGroups", userId0, casGroups)}
}

func (_c *mockGroupModifier_removeNonExistingGroups_Call) Run(run func(userId0 userId, casGroups []string)) *mockGroupModifier_removeNonExistingGroups_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(userId), args[1].([]string))
	})
	return _c
}

func (_c *mockGroupModifier_removeNonExistingGroups_Call) Return(_a0 error) *mockGroupModifier_removeNonExistingGroups_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *mockGroupModifier_removeNonExistingGroups_Call) RunAndReturn(run func(userId, []string) error) *mockGroupModifier_removeNonExistingGroups_Call {
	_c.Call.Return(run)
	return _c
}

// newMockGroupModifier creates a new instance of mockGroupModifier. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockGroupModifier(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockGroupModifier {
	mock := &mockGroupModifier{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
