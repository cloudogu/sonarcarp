// Code generated by mockery v2.42.1. DO NOT EDIT.

package replicator

import mock "github.com/stretchr/testify/mock"

// mockRequester is an autogenerated mock type for the requester type
type mockRequester struct {
	mock.Mock
}

type mockRequester_Expecter struct {
	mock *mock.Mock
}

func (_m *mockRequester) EXPECT() *mockRequester_Expecter {
	return &mockRequester_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: method, url
func (_m *mockRequester) Send(method string, url string) (*ResponseWithBody, error) {
	ret := _m.Called(method, url)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 *ResponseWithBody
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*ResponseWithBody, error)); ok {
		return rf(method, url)
	}
	if rf, ok := ret.Get(0).(func(string, string) *ResponseWithBody); ok {
		r0 = rf(method, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResponseWithBody)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(method, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockRequester_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type mockRequester_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - method string
//   - url string
func (_e *mockRequester_Expecter) Send(method interface{}, url interface{}) *mockRequester_Send_Call {
	return &mockRequester_Send_Call{Call: _e.mock.On("Send", method, url)}
}

func (_c *mockRequester_Send_Call) Run(run func(method string, url string)) *mockRequester_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *mockRequester_Send_Call) Return(_a0 *ResponseWithBody, _a1 error) *mockRequester_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockRequester_Send_Call) RunAndReturn(run func(string, string) (*ResponseWithBody, error)) *mockRequester_Send_Call {
	_c.Call.Return(run)
	return _c
}

// SendWithJsonBody provides a mock function with given fields: method, url, jsonStruct
func (_m *mockRequester) SendWithJsonBody(method string, url string, jsonStruct interface{}) (*ResponseWithBody, error) {
	ret := _m.Called(method, url, jsonStruct)

	if len(ret) == 0 {
		panic("no return value specified for SendWithJsonBody")
	}

	var r0 *ResponseWithBody
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, interface{}) (*ResponseWithBody, error)); ok {
		return rf(method, url, jsonStruct)
	}
	if rf, ok := ret.Get(0).(func(string, string, interface{}) *ResponseWithBody); ok {
		r0 = rf(method, url, jsonStruct)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ResponseWithBody)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, interface{}) error); ok {
		r1 = rf(method, url, jsonStruct)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// mockRequester_SendWithJsonBody_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendWithJsonBody'
type mockRequester_SendWithJsonBody_Call struct {
	*mock.Call
}

// SendWithJsonBody is a helper method to define mock.On call
//   - method string
//   - url string
//   - jsonStruct interface{}
func (_e *mockRequester_Expecter) SendWithJsonBody(method interface{}, url interface{}, jsonStruct interface{}) *mockRequester_SendWithJsonBody_Call {
	return &mockRequester_SendWithJsonBody_Call{Call: _e.mock.On("SendWithJsonBody", method, url, jsonStruct)}
}

func (_c *mockRequester_SendWithJsonBody_Call) Run(run func(method string, url string, jsonStruct interface{})) *mockRequester_SendWithJsonBody_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *mockRequester_SendWithJsonBody_Call) Return(_a0 *ResponseWithBody, _a1 error) *mockRequester_SendWithJsonBody_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *mockRequester_SendWithJsonBody_Call) RunAndReturn(run func(string, string, interface{}) (*ResponseWithBody, error)) *mockRequester_SendWithJsonBody_Call {
	_c.Call.Return(run)
	return _c
}

// newMockRequester creates a new instance of mockRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRequester {
	mock := &mockRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
