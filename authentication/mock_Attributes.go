// Code generated by mockery v2.42.1. DO NOT EDIT.

package authentication

import (
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockAttributes is an autogenerated mock type for the Attributes type
type MockAttributes struct {
	mock.Mock
}

type MockAttributes_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAttributes) EXPECT() *MockAttributes_Expecter {
	return &MockAttributes_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: r
func (_m *MockAttributes) Execute(r *http.Request) map[string][]string {
	ret := _m.Called(r)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 map[string][]string
	if rf, ok := ret.Get(0).(func(*http.Request) map[string][]string); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	return r0
}

// MockAttributes_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockAttributes_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - r *http.Request
func (_e *MockAttributes_Expecter) Execute(r interface{}) *MockAttributes_Execute_Call {
	return &MockAttributes_Execute_Call{Call: _e.mock.On("Execute", r)}
}

func (_c *MockAttributes_Execute_Call) Run(run func(r *http.Request)) *MockAttributes_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*http.Request))
	})
	return _c
}

func (_c *MockAttributes_Execute_Call) Return(_a0 map[string][]string) *MockAttributes_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAttributes_Execute_Call) RunAndReturn(run func(*http.Request) map[string][]string) *MockAttributes_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAttributes creates a new instance of MockAttributes. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAttributes(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAttributes {
	mock := &MockAttributes{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
